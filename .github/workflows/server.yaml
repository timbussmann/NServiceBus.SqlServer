name: CI
on:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Install SQL Server (Windows)
        if: matrix.name == 'Windows'
        #TODO: investigate caching
        run: |
          choco install sql-server-express
          echo "::set-output name=db_instance::.\SQLEXPRESS"
          echo "SQLCMDSERVER=.\SQLEXPRESS" >> $GITHUB_ENV
          echo "SqlServerTransportConnectionString=Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" >> $GITHUB_ENV
      - name: Start SQL Server (Linux)
        id: server
        if: matrix.name == 'Linux'
        run: |
          echo "starting sql server container"
          sa_pw=DEVELOPERS!developers!
          docker run -d -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$sa_pw" -p 1433:1433 --name sqlserver mcr.microsoft.com/mssql/server:2017-latest
          echo "SQLCMDPASSWORD=$sa_pw" >> $GITHUB_ENV
          echo "SQLCMDUSER=sa" >> $GITHUB_ENV
          echo "SQLCMDSERVER=localhost,1433" >> $GITHUB_ENV
          echo "SqlServerTransportConnectionString=Server=localhost;Database=nservicebus;User Id=SA;Password=$sa_pw;"
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Prepare SQL Server
        run: |
          # run this part later in the job to ensure the DB is up and running
          #Invoke-Sqlcmd -Query "CREATE DATABASE nservicebus" -ServerInstance ".\SQLEXPRESS"
          #Invoke-Sqlcmd -Query "CREATE DATABASE nservicebus1" -ServerInstance ".\SQLEXPRESS"
          #Invoke-Sqlcmd -Query "CREATE DATABASE nservicebus2" -ServerInstance ".\SQLEXPRESS"
          #Invoke-Sqlcmd -Query "CREATE SCHEMA receiver AUTHORIZATION db_owner" -ServerInstance $db_instance -Database "nservicebus" $credentials_args
          #Invoke-Sqlcmd -Query "CREATE SCHEMA sender AUTHORIZATION db_owner" -ServerInstance $db_instance -Database "nservicebus" $credentials_args
          #Invoke-Sqlcmd -Query "CREATE SCHEMA db@ AUTHORIZATION db_owner" -ServerInstance $db_instance -Database "nservicebus" $credentials_args
          
          echo "create databases"
          sqlcmd -Q "CREATE DATABASE nservicebus"
          sqlcmd -Q "CREATE DATABASE nservicebus1"
          sqlcmd -Q "CREATE DATABASE nservicebus2"
          
          echo "create additional schemas"
          sqlcmd -Q "CREATE SCHEMA receiver AUTHORIZATION db_owner" -d "nservicebus"
          sqlcmd -Q "CREATE SCHEMA sender AUTHORIZATION db_owner" -d "nservicebus"
          sqlcmd -Q "CREATE SCHEMA db@ AUTHORIZATION db_owner" -d "nservicebus"
      - name: Run tests
        uses: Particular/run-tests-action@v1.0.0
